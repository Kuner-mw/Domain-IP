# .github/workflows/lookup-ips.yml

name: 定期获取域名IP

# 工作流触发条件
on:
  # 允许您在 Actions 页面手动触发此工作流
  workflow_dispatch:

  # 设置定时任务，使用 cron 语法
  # 下面的设置表示在每天的 UTC 时间 0 点 0 分执行一次
  schedule:
    - cron: '0 0 * * *'

jobs:
  lookup-ips:
    # 使用最新的 Ubuntu 虚拟机环境
    runs-on: ubuntu-latest

    steps:
      # 第一步：检出您的仓库代码，以便脚本可以访问 domains.txt
      - name: 检出代码
        uses: actions/checkout@v4

      # 第二步：执行查询脚本
      - name: 查询 IP 地址并生成结果文件
        run: |
          # 定义输入和输出文件名
          INPUT_FILE="domains.txt"
          OUTPUT_FILE="hosts_results.txt"

          # 清空或创建结果文件，并添加一个标题和时间戳
          echo "# GitHub 相关域名最新 IP 地址 (Hosts 格式)" > $OUTPUT_FILE
          echo "# 最后更新于: $(date -u)" >> $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          # 读取 domains.txt 文件，并逐行查询每个域名的 IP
          while IFS= read -r domain || [[ -n "$domain" ]]; do
            # 忽略空行和注释行
            if [[ -n "$domain" && ! "$domain" =~ ^# ]]; then
              echo "正在查询: $domain"
              # 使用 dig 命令查询 A 记录，'+short' 参数让输出更简洁
              # tr 将换行符转换为空格，sed 去掉末尾的空格
              ips=$(dig +short A "$domain" | tr '\n' ' ')

              if [[ -n "$ips" ]]; then
                # 将每个 IP 和域名配对，写入文件，模拟 hosts 文件格式
                for ip in $ips; do
                  echo "$ip $domain" >> $OUTPUT_FILE
                done
              else
                echo "# 未能解析IP: $domain" >> $OUTPUT_FILE
              fi
            fi
          done < "$INPUT_FILE"
          
          echo "查询完成，结果已保存到 $OUTPUT_FILE"

      # 第三步：将生成的结果文件提交回您的仓库
      - name: 提交并推送结果
        run: |
          # 配置 Git 用户信息
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'github-actions-bot@users.noreply.github.com'
          
          # 将生成的文件添加到暂存区
          git add hosts_results.txt
          
          # 检查文件是否有变动，只有在有变动时才执行提交和推送
          if ! git diff --cached --quiet; then
            git commit -m "自动更新域名IP地址列表"
            git push
          else
            echo "IP地址列表无变化，无需提交。"
          fi
